#include "Matrix.h"
#include <iostream>
#include <string>
#include <gtest/gtest.h>

#ifdef MSVC
#pragma comment(lib,"gtestd.lib")
#endif

//for IntelliSence
#define Matrix Matrix
#define MTEST_BEGIN()\
	try\
	{
#define MTEST_END()\
	}\
	catch (...)\
	{\
		ADD_FAILURE();\
	}

using namespace cildhdi;


TEST(Matrix, ConstructorTest)
{
	MTEST_BEGIN();

	Matrix<2, 2, int> mi;
	Matrix<2, 2, unsigned int> mui;
	Matrix<2, 2, double> md;

	Matrix<2, 2, int> mi1(mi);
	Matrix<2, 2, unsigned int> mui1(mui);
	Matrix<2, 2, double> md1(md);

	unsigned int ia[2][2] = { 1,2,3,4 };
	Matrix<2, 2, unsigned int> mui2(ia);
	Matrix<2, 2, int> mi2(ia);
	double da[2][2] = { 1.0,2.0,3.0,4.0 };
	Matrix<2, 2, double> md2(da);

	std::vector<int> vi = { 1,2,3,4 };
	Matrix<2, 2, int> mi3(vi);
	std::vector<double> vd = { 1.0,2.0,3.0,4.0 };
	Matrix<2, 2, double> md3(vd);

	std::vector<std::vector<int>> vvi = { {1,2},{3,4} };
	Matrix<2, 2, int> mi4(vvi);
	std::vector<std::vector<double>> vvd = { {1.0,2.0},{3.0,4.0} };
	Matrix<2, 2, double> md4(vvd);

	MTEST_END();
}


TEST(Matrix, RowSizeTest)
{
	MTEST_BEGIN();
	Matrix<1, 2, int> mi;
	EXPECT_EQ(mi.row_size(), 1);

	Matrix<2, 1, int> nmi;
	EXPECT_EQ(nmi.row_size(), 2);

	Matrix<1, 2, double> md;
	EXPECT_EQ(md.row_size(), 1);

	Matrix<2, 1, double> nmd;
	EXPECT_EQ(nmd.row_size(), 2);
	MTEST_END();
}

TEST(Matrix, ColumnSizeTest)
{
	MTEST_BEGIN();
	Matrix<1, 2, int> mi;
	EXPECT_EQ(mi.column_size(), 2);

	Matrix<2, 1, int> nmi;
	EXPECT_EQ(nmi.column_size(), 1);

	Matrix<1, 2, double> md;
	EXPECT_EQ(md.column_size(), 2);

	Matrix<2, 1, double> nmd;
	EXPECT_EQ(nmd.column_size(), 1);
	MTEST_END();
}

TEST(Matrix, DataSizeTest)
{
	MTEST_BEGIN();
	Matrix<1, 2, int> mi;
	EXPECT_EQ(mi.data_size(), 1 * 2 * sizeof(int));

	Matrix<2, 1, int> nmi;
	EXPECT_EQ(nmi.data_size(), 1 * 2 * sizeof(int));

	Matrix<1, 2, double> md;
	EXPECT_EQ(md.data_size(), 1 * 2 * sizeof(double));

	Matrix<2, 1, double> nmd;
	EXPECT_EQ(nmd.data_size(), 1 * 2 * sizeof(double));
	MTEST_END();
}

TEST(Matrix, AtTest)
{
	MTEST_BEGIN();
	unsigned int index;
	unsigned int ia[2][2] = { 1,2,3,4 };
	Matrix<2, 2, unsigned int> mui2(ia);
	index = 0;
	for (size_t i = 0; i < 2; i++)
	{
		for (size_t j = 0; j < 2; j++)
		{
			EXPECT_EQ(mui2.at(i, j), ++index);
			mui2.at(i, j) = 0;
			EXPECT_EQ(mui2.at(i, j), 0);
		}
	}

	Matrix<2, 2, int> mi2(ia);
	index = 0;
	for (size_t i = 0; i < 2; i++)
	{
		for (size_t j = 0; j < 2; j++)
		{
			EXPECT_EQ(mi2.at(i, j), ++index);
			mi2.at(i, j) = 0;
			EXPECT_EQ(mi2.at(i, j), 0);
		}
	}

	double da[2][2] = { 1.0,2.0,3.0,4.0 };
	Matrix<2, 2, double> md2(da);
	index = 0;
	for (size_t i = 0; i < 2; i++)
	{
		for (size_t j = 0; j < 2; j++)
		{
			EXPECT_DOUBLE_EQ(md2.at(i, j), ++index);
			md2.at(i, j) = 0;
			EXPECT_DOUBLE_EQ(md2.at(i, j), 0);
		}
	}

	std::vector<int> vi = { 1,2,3,4 };
	Matrix<2, 2, int> mi3(vi);
	index = 0;
	for (size_t i = 0; i < 2; i++)
	{
		for (size_t j = 0; j < 2; j++)
		{
			EXPECT_EQ(mi3.at(i, j), ++index);
			mi3.at(i, j) = 0;
			EXPECT_EQ(mi3.at(i, j), 0);
		}
	}

	std::vector<double> vd = { 1.0,2.0,3.0,4.0 };
	Matrix<2, 2, double> md3(vd);
	index = 0;
	for (size_t i = 0; i < 2; i++)
	{
		for (size_t j = 0; j < 2; j++)
		{
			EXPECT_DOUBLE_EQ(md3.at(i, j), ++index);
			md3.at(i, j) = 0;
			EXPECT_DOUBLE_EQ(md3.at(i, j), 0);
		}
	}

	std::vector<std::vector<int>> vvi = { {1,2},{3,4} };
	Matrix<2, 2, int> mi4(vvi);
	index = 0;
	for (size_t i = 0; i < 2; i++)
	{
		for (size_t j = 0; j < 2; j++)
		{
			EXPECT_EQ(mi4.at(i, j), ++index);
			mi4.at(i, j) = 0;
			EXPECT_EQ(mi4.at(i, j), 0);
		}
	}

	std::vector<std::vector<double>> vvd = { {1.0,2.0},{3.0,4.0} };
	Matrix<2, 2, double> md4(vvd);
	index = 0;
	for (size_t i = 0; i < 2; i++)
	{
		for (size_t j = 0; j < 2; j++)
		{
			EXPECT_DOUBLE_EQ(md4.at(i, j), ++index);
			md4.at(i, j) = 0;
			EXPECT_DOUBLE_EQ(md4.at(i, j), 0);
		}
	}

	MTEST_END();
}

TEST(Matrix, DataFromTest)
{
	MTEST_BEGIN();
	unsigned int index = 0;
	std::vector<int> vi = { 1,2,3,4 };
	Matrix<2, 2, int> mi3;
	mi3.data_from(vi);
	index = 0;
	for (size_t i = 0; i < 2; i++)
	{
		for (size_t j = 0; j < 2; j++)
		{
			EXPECT_EQ(mi3.at(i, j), ++index);
		}
	}

	std::vector<double> vd = { 1.0,2.0,3.0,4.0 };
	Matrix<2, 2, double> md3;
	md3.data_from(vd);
	index = 0;
	for (size_t i = 0; i < 2; i++)
	{
		for (size_t j = 0; j < 2; j++)
		{
			EXPECT_DOUBLE_EQ(md3.at(i, j), ++index);
		}
	}

	std::vector<std::vector<int>> vvi = { {1,2},{3,4} };
	Matrix<2, 2, int> mi4;
	mi4.data_from(vvi);
	index = 0;
	for (size_t i = 0; i < 2; i++)
	{
		for (size_t j = 0; j < 2; j++)
		{
			EXPECT_EQ(mi4.at(i, j), ++index);
		}
	}

	std::vector<std::vector<double>> vvd = { {1.0,2.0},{3.0,4.0} };
	Matrix<2, 2, double> md4;
	md4.data_from(vvd);
	index = 0;
	for (size_t i = 0; i < 2; i++)
	{
		for (size_t j = 0; j < 2; j++)
		{
			EXPECT_DOUBLE_EQ(md4.at(i, j), ++index);
		}
	}
	MTEST_END();
}

TEST(Matrix, MaxTest)
{
	MTEST_BEGIN();

	std::vector<int> vi = { 4,3,2,1 };
	Matrix<2, 2, int> mi(vi);
	EXPECT_EQ(mi.max(), 4);

	std::sort(vi.begin(), vi.end());
	Matrix<2, 2, int> mi2(vi);
	EXPECT_EQ(mi.max(), 4);

	std::vector<double> vd = { 4.0,3.0,2.0,1.0 };
	Matrix<2, 2, double> md(vd);
	EXPECT_DOUBLE_EQ(mi.max(), 4);

	std::sort(vd.begin(), vd.end());
	Matrix<2, 2, double> md2(vd);
	EXPECT_DOUBLE_EQ(md2.max(), 4);

	MTEST_END();
}

TEST(Matrix, MinTest)
{
	MTEST_BEGIN();

	std::vector<int> vi = { 4,3,2,1 };
	Matrix<2, 2, int> mi(vi);
	EXPECT_EQ(mi.min(), 1);

	std::sort(vi.begin(), vi.end());
	Matrix<2, 2, int> mi2(vi);
	EXPECT_EQ(mi.min(), 1);

	std::vector<double> vd = { 4.0,3.0,2.0,1.0 };
	Matrix<2, 2, double> md(vd);
	EXPECT_DOUBLE_EQ(mi.min(), 1);

	std::sort(vd.begin(), vd.end());
	Matrix<2, 2, double> md2(vd);
	EXPECT_DOUBLE_EQ(md2.min(), 1);

	MTEST_END();
}

TEST(Matrix, OperatorEqualTest)
{
	MTEST_BEGIN();

	int data[3][3] =
	{
		{1,2,3},
		{4,5,6},
		{7,8,9}
	};
	Matrix<3, 3, int> mi1(data);
	Matrix<3, 3, int> mi2(data);
	EXPECT_TRUE(mi1 == mi2);

	double data1[3][3] =
	{
		{7,8,9},
		{1,2,3},
		{4,5,6}
	};
	Matrix<3, 3, double> md1(data1);
	Matrix<3, 3, double> md2(data1);
	EXPECT_TRUE(md1 == md2);

	EXPECT_FALSE(mi1 == md1);

	MTEST_END();
}

TEST(Matrix, SwapRowTest)
{
	MTEST_BEGIN();

	int idata1[3][3] =
	{
		{1,2,3},
		{4,5,6},
		{7,8,9}
	},
		idata2[3][3] =
	{
		{7,8,9},
		{4,5,6},
		{1,2,3}
	};
	Matrix<3, 3, int> mib(idata1), mia(idata2);
	mib.swap_row(0, 2);
	EXPECT_TRUE(mib == mia);

	double ddata1[3][3] =
	{
		{1.0,2.0,3.0},
		{4.0,5.0,6.0},
		{7.0,8.0,9.0}
	},
		ddata2[3][3] =
	{
		{7.0,8.0,9.0},
		{4.0,5.0,6.0},
		{1.0,2.0,3.0}
	};
	Matrix<3, 3, double> mdb(ddata1), mda(ddata2);
	mdb.swap_row(0, 2);
	EXPECT_TRUE(mdb == mda);

	MTEST_END();
}

TEST(Matrix, SwapColumnTest)
{
	MTEST_BEGIN();

	int idata1[3][3] =
	{
		{1,2,3},
		{4,5,6},
		{7,8,9}
	},
		idata2[3][3] =
	{
		{3,2,1},
		{6,5,4},
		{9,8,7}
	};
	Matrix<3, 3, int> mib(idata1), mia(idata2);
	mib.swap_column(0, 2);
	EXPECT_TRUE(mib == mia);

	double ddata1[3][3] =
	{
		{1.0,2.0,3.0},
		{4.0,5.0,6.0},
		{7.0,8.0,9.0}
	},
		ddata2[3][3] =
	{
		{3.0,2.0,1.0},
		{6.0,5.0,4.0},
		{9.0,8.0,7.0}
	};
	Matrix<3, 3, double> mdb(ddata1), mda(ddata2);
	mdb.swap_column(0, 2);
	EXPECT_TRUE(mdb == mda);

	MTEST_END();
}

TEST(Matrix, TransposeTest)
{
	MTEST_BEGIN();

	int idata1[2][3] =
	{
		{1,2,3},
		{4,5,6}
	},
		idata2[3][2] =
	{
		{1,4},
		{2,5},
		{3,6}
	};
	Matrix<2, 3, int> m(idata1);
	auto m1 = m.transpose();
	EXPECT_EQ(m1.row_size(), m.column_size());
	EXPECT_EQ(m1.column_size(), m.row_size());
	Matrix<3, 2, int> m3(idata2);
	EXPECT_TRUE(m1 == m3);

	MTEST_END();
}

TEST(Matrix, OperatorNumberAddTest)
{
	MTEST_BEGIN();

	int data1[3][3] =
	{
		{1,2,3},
		{4,5,6},
		{7,8,9}
	},
		data2[3][3] =
	{
		{3,2,1},
		{6,5,4},
		{9,8,7}
	},
		res[3][3] =
	{
		{4,4,4},
		{10,10,10},
		{16,16,16}
	};
	Matrix<3, 3, int> mib(data1), mia(data2);
	Matrix<3, 3, int> ires(res), as = mia + mib;
	EXPECT_TRUE(as == ires);

	MTEST_END();
}

TEST(Matrix, OperatorNumberMinusTest)
{
	MTEST_BEGIN();

	int data1[3][3] =
	{
		{1,2,3},
		{4,5,6},
		{7,8,9}
	},
		data2[3][3] =
	{
		{3,2,1},
		{6,5,4},
		{9,8,7}
	},
		res[3][3] =
	{
		{-2,0,2},
		{-2,0,2},
		{-2,0,2}
	};
	Matrix<3, 3, int> mib(data1), mia(data2);
	Matrix<3, 3, int> ires(res), as = mib - mia;
	EXPECT_TRUE(as == ires);

	MTEST_END();
}


TEST(Matrix, OperatorNumberDivideTest)
{
	MTEST_BEGIN();

	int data1[3][3] =
	{
		{1,2,3},
		{4,5,6},
		{7,8,9}
	},
		res[3][3] = {};
	for (size_t k = 1; k < 100; k++)
	{
		for (size_t i = 0; i < 3; i++)
		{
			for (size_t j = 0; j < 3; j++)
			{
				res[i][j] = data1[i][j] / k;
			}
		}
		Matrix<3, 3, int> mib(data1), ires(res), m = mib / k;
		EXPECT_TRUE(m == ires) << "k = " << k;
	}

	MTEST_END();
}

TEST(Matrix, OperatorMultiplyTest)
{
	MTEST_BEGIN();

	//auto generate
	//50 tests
	{
		int m1[5][4] = {
		{44,28,20,30},
		{42,50,29,44},
		{33,49,27,33},
		{31,12,43,31},
		{20,21,40,21} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{35,39,37,25,11},
		{3,4,2,22,44},
		{14,3,48,17,8},
		{18,4,15,3,34} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{2444,2008,3094,2146,2896},
		{2818,2101,3706,2775,4390},
		{2274,1696,3110,2461,3857},
		{2281,1510,3700,1863,2267},
		{1701,1068,3017,1705,2178} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{22,17,2,24,30},
		{6,1,11,1,34},
		{13,6,9,10,12},
		{35,46,14,22,12} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{12,34,46,17},
		{25,39,39,15},
		{21,20,35,10},
		{14,4,23,46},
		{31,3,0,45} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{1997,1637,2297,3103},
		{1396,569,723,1803},
		{1007,932,1377,1401},
		{2544,3388,4400,2977} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{48,48,45,20},
		{36,17,22,30},
		{30,21,30,50},
		{26,31,37,20},
		{43,19,39,14} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{16,17,29,47,30},
		{44,31,42,10,39},
		{50,10,0,2,31},
		{38,38,18,7,1} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{5890,3514,3768,2966,4727},
		{3564,2499,2298,2116,2455},
		{4804,3361,2652,2030,2699},
		{4390,2533,2416,1746,3156},
		{4006,2242,2297,2387,3254} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{30,35,14,43,47},
		{10,3,36,50,45},
		{31,26,33,19,46},
		{37,45,30,13,34} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{28,5,20,15},
		{11,30,24,38},
		{50,27,37,21},
		{50,15,35,33},
		{4,10,10,48} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{4263,2693,3933,5749},
		{4793,2312,3804,4830},
		{3938,2571,3590,4981},
		{3817,2880,3725,4956} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{40,2,3,2},
		{1,50,8,17},
		{48,41,21,9},
		{20,19,3,27},
		{5,10,15,11} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{3,12,43,32,17},
		{13,45,7,22,20},
		{23,24,22,35,45},
		{27,12,28,4,30} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{269,666,1856,1437,915},
		{1296,2658,1045,1480,1887},
		{1403,3033,3065,3209,2851},
		{1105,1491,1815,1271,1665},
		{787,1002,923,949,1290} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{27,7,25,1,2},
		{22,50,38,49,15},
		{23,10,26,47,39},
		{50,37,32,47,31} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{6,11,1,45},
		{24,33,2,14},
		{33,16,13,17},
		{38,22,40,22},
		{41,26,11,41} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{1275,1002,428,1842},
		{5063,3968,2741,4029},
		{4621,3047,2690,4250},
		{5301,4123,2761,5617} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{19,6,21,5},
		{34,7,49,19},
		{5,12,18,10},
		{1,13,44,36},
		{9,27,37,19} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{23,42,45,20,35},
		{45,29,47,32,24},
		{19,5,31,26,45},
		{14,46,22,25,8} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{1176,1307,1898,1243,1794},
		{2294,2750,3796,2653,3715},
		{1137,1108,1567,1202,1353},
		{1948,2295,2812,2480,2615},
		{2391,2220,3239,2481,2780} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{28,36,4,45,15},
		{3,26,40,41,28},
		{3,0,2,9,46},
		{10,39,19,34,1} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{31,36,30,49},
		{41,14,36,24},
		{46,19,23,50},
		{21,46,25,25},
		{32,29,8,26} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{3953,4093,3473,3951},
		{4756,3930,3195,4524},
		{1846,1894,729,1668},
		{3529,2860,2999,3252} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{43,45,24,33},
		{49,37,5,3},
		{17,21,9,41},
		{8,34,28,44},
		{46,4,13,35} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{6,10,10,28,15},
		{28,16,44,41,50},
		{43,33,4,36,9},
		{47,48,39,48,17} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{4101,3526,3793,5497,3672},
		{1686,1391,2255,3213,2681},
		{3004,2771,2729,3629,2083},
		{4272,3660,3404,4738,2820},
		{2592,2633,2053,3600,1602} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{48,39,49,37,37},
		{38,39,25,17,2},
		{38,3,18,7,48},
		{31,14,21,19,32} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{36,27,2,34},
		{11,35,1,4},
		{2,28,7,43},
		{1,13,14,1},
		{22,10,49,14} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{3106,4884,2809,4450},
		{1908,3332,626,2568},
		{2500,2206,2655,2757},
		{2035,2482,2057,2480} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{3,2,13,0},
		{20,18,34,47},
		{3,7,27,8},
		{14,20,28,48},
		{18,33,22,14} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{4,6,33,9,49},
		{10,48,41,37,45},
		{38,45,34,46,10},
		{37,28,2,10,0} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{526,699,623,699,367},
		{3291,3830,2648,2880,2130},
		{1404,1793,1320,1608,732},
		{3096,3648,2330,2634,1866},
		{1756,3074,2723,2535,2587} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{31,47,43,29,22},
		{29,6,5,46,50},
		{45,44,18,12,31},
		{16,2,8,33,30} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{22,36,48,3},
		{19,2,16,34},
		{12,10,17,7},
		{9,45,6,19},
		{29,33,40,4} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{2990,3671,4025,2631},
		{2676,4826,3849,1400},
		{3049,3451,4482,2109},
		{1653,3135,2334,919} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{49,11,41,12},
		{36,22,45,30},
		{43,12,23,11},
		{31,5,16,12},
		{24,34,41,34} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{44,26,6,11,33},
		{46,18,42,49,25},
		{46,31,11,8,45},
		{32,23,37,50,20} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{4932,3019,1651,2006,3977},
		{5626,3417,2745,3334,4363},
		{3854,2300,1422,1795,2974},
		{2714,1668,1016,1314,2108},
		{5594,3289,3281,3958,4167} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{23,44,20,17,16},
		{18,33,38,41,11},
		{15,2,41,33,34},
		{18,45,50,11,29} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{4,35,11,13},
		{43,33,32,1},
		{14,7,35,32},
		{5,10,37,0},
		{30,49,25,18} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{2829,3351,3390,1271},
		{2558,2934,4376,1681},
		{1905,2874,3735,2121},
		{3632,3996,4520,2401} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{6,4,44,16},
		{31,44,1,21},
		{36,38,43,4},
		{22,23,44,36},
		{21,9,35,7} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{14,50,5,7,5},
		{47,14,31,13,12},
		{30,28,27,2,1},
		{39,48,21,18,29} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{2216,2356,1678,470,586},
		{3351,3202,1987,1169,1293},
		{3736,3728,2603,904,795},
		{4113,4382,2767,1189,1474},
		{2040,2492,1476,460,451} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{4,47,48,36,4},
		{34,47,24,13,14},
		{9,41,2,5,1},
		{2,29,10,29,33} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{10,23,43,29},
		{0,4,11,37},
		{22,33,46,22},
		{0,2,21,35},
		{2,4,1,50} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{1104,1952,3657,4371},
		{896,1844,3370,4408},
		{136,451,1036,2047},
		{306,682,1507,4016} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{24,16,36,34},
		{48,2,18,50},
		{45,0,18,39},
		{36,40,35,41},
		{36,5,13,31} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{17,24,34,0,44},
		{18,0,29,36,14},
		{16,6,4,15,20},
		{24,46,26,32,22} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{2088,2356,2308,2204,2748},
		{2340,3560,3062,1942,3600},
		{1989,2982,2616,1518,3198},
		{2876,2960,3590,3277,3746},
		{1654,2368,2227,1367,2596} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{49,6,18,50,15},
		{2,23,34,20,43},
		{33,50,25,47,24},
		{13,37,15,35,22} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{40,33,17,11},
		{24,32,10,45},
		{7,13,25,35},
		{6,34,34,15},
		{32,24,41,43} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{3010,4103,3658,2834},
		{2366,2956,3557,4396},
		{3745,5188,4268,5225},
		{2427,3526,3058,3804} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{6,29,11,28},
		{26,17,5,50},
		{32,3,27,50},
		{38,4,49,14},
		{46,3,18,21} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{45,9,12,44,34},
		{46,8,45,27,24},
		{33,42,41,16,9},
		{17,32,9,3,9} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{2443,1644,2080,1307,1251},
		{2967,2180,1732,1833,1787},
		{3319,3046,2076,2071,1853},
		{3749,2880,2771,2606,1955},
		{3159,1866,1614,2456,1987} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{35,18,33,33,17},
		{39,47,14,5,26},
		{4,49,13,24,2},
		{47,4,48,12,7} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{37,35,45,33},
		{6,1,27,27},
		{41,15,21,48},
		{43,23,22,49},
		{29,44,47,47} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{4668,3245,4279,5641},
		{3268,2881,4650,4695},
		{2065,1024,2398,3349},
		{4450,2953,3824,4880} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{4,7,28,50},
		{45,38,34,24},
		{6,25,8,8},
		{26,35,25,28},
		{28,37,0,29} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{34,50,27,30,37},
		{15,0,37,31,37},
		{30,27,34,8,20},
		{40,5,14,0,28} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{3081,1206,2019,561,2367},
		{4080,3288,4113,2800,4423},
		{1139,556,1471,1019,1531},
		{3279,2115,3239,2065,3541},
		{2667,1545,2531,1987,3217} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{45,27,47,19,49},
		{13,23,9,28,3},
		{18,22,9,5,42},
		{3,45,20,44,39} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{40,12,41,16},
		{18,46,27,25},
		{35,32,43,6},
		{3,4,47,1},
		{28,11,16,32} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{5360,3901,6272,3264},
		{1417,1647,2905,961},
		{2622,1998,2626,2241},
		{2854,3351,4890,2585} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{25,8,11,31},
		{17,16,49,17},
		{2,20,33,25},
		{48,30,9,23},
		{2,31,36,41} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{39,16,12,19,12},
		{2,14,46,34,32},
		{0,7,43,11,25},
		{32,18,41,31,11} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{1983,1147,2412,1829,1172},
		{1239,1145,3744,1933,2128},
		{918,993,3388,1856,1764},
		{2668,1665,3286,2744,2014},
		{1452,1456,4679,2759,2367} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{33,3,32,37,43},
		{29,35,30,28,20},
		{6,33,36,8,49},
		{10,19,47,44,24} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{48,4,36,16},
		{35,29,21,21},
		{47,15,6,1},
		{37,5,0,32},
		{21,34,4,28} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{5465,2346,1615,3011},
		{5483,2401,2039,2685},
		{4460,3227,1321,2453},
		{5486,2332,1137,2686} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{32,1,10,6},
		{43,19,15,44},
		{30,26,33,50},
		{26,28,1,6},
		{21,41,49,13} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{11,12,49,1,1},
		{34,2,36,31,24},
		{35,44,15,21,40},
		{26,27,0,48,4} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{892,988,1754,561,480},
		{2788,2402,3016,3059,1275},
		{3669,3214,2901,3929,2174},
		{1429,574,2297,1203,762},
		{3678,2841,3240,2945,3017} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{14,2,27,47,5},
		{34,28,24,44,27},
		{45,34,46,44,9},
		{20,29,5,50,26} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{21,28,41,48},
		{24,45,44,17},
		{50,8,27,29},
		{35,5,37,47},
		{50,17,42,50} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{3587,1018,3340,3948},
		{5476,3083,6036,6222},
		{6051,3531,6589,6590},
		{4416,2597,5173,5248} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{14,24,2,38},
		{6,22,13,35},
		{48,4,37,5},
		{11,16,40,19},
		{32,6,31,1} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{14,7,17,4,3},
		{47,2,50,3,35},
		{41,21,12,17,20},
		{1,11,16,43,35} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{1444,606,2070,1796,2252},
		{1686,744,1918,1816,2273},
		{2382,1176,1540,1048,1199},
		{2565,1158,1771,1589,2058},
		{2002,898,1232,716,961} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{1,12,17,37,45},
		{36,31,5,5,37},
		{13,45,1,22,39},
		{4,18,34,50,5} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{10,12,23,30},
		{32,37,22,27},
		{4,36,31,49},
		{18,4,18,34},
		{41,33,23,49} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{2973,2701,2515,4650},
		{2979,3000,2606,4145},
		{3569,3232,2613,4313},
		{1857,2303,2557,4217} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{45,44,47,40},
		{30,41,15,22},
		{39,34,18,7},
		{40,31,40,49},
		{21,1,2,34} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{38,24,23,29,3},
		{34,46,18,34,45},
		{3,22,16,47,20},
		{15,5,48,27,49} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{3947,4338,4499,6090,5015},
		{2909,3046,2724,3563,3313},
		{2797,2931,2133,3322,2350},
		{3429,3511,4470,5417,4716},
		{1348,764,2165,1655,1814} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{43,41,47,36,3},
		{34,37,8,5,47},
		{31,21,12,11,2},
		{13,42,33,20,30} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{18,32,50,14},
		{0,26,39,40},
		{46,38,18,33},
		{5,13,9,44},
		{22,13,25,42} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{3182,4735,4994,5503},
		{2039,3030,4507,4414},
		{1209,2163,2734,2238},
		{2512,3412,3812,5091} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{47,3,46,4},
		{48,36,38,36},
		{43,36,19,38},
		{32,12,12,3},
		{11,13,22,21} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{44,40,5,37,1},
		{10,37,39,27,14},
		{18,47,3,34,30},
		{40,1,24,32,19} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{3086,4157,586,3512,1545},
		{4596,5074,2622,5192,2376},
		{4114,3983,2588,4425,1839},
		{1864,2291,736,2012,617},
		{1850,1976,1132,2178,1252} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{35,15,42,20,38},
		{15,7,16,11,21},
		{44,40,25,6,24},
		{19,13,38,34,36} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{37,45,4,42},
		{6,6,37,50},
		{24,35,5,35},
		{18,5,33,29},
		{36,0,31,1} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{4121,3235,2743,4308},
		{1935,1332,1413,1880},
		{3440,3125,2723,4921},
		{3601,2433,2985,3800} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{26,22,43,17},
		{47,38,27,32},
		{12,29,5,16},
		{22,6,1,33},
		{18,11,9,50} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{22,44,3,10,8},
		{7,16,9,8,26},
		{4,12,46,5,47},
		{34,20,18,5,4} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{1476,2352,2560,736,2869},
		{2496,3640,2301,1069,2761},
		{1031,1372,815,457,1149},
		{1652,1736,760,438,511},
		{2209,2076,1467,563,1053} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{43,47,7,39,29},
		{35,25,37,36,28},
		{23,37,33,9,18},
		{2,3,18,22,40} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{25,12,16,15},
		{29,7,23,12},
		{35,48,31,43},
		{27,44,15,12},
		{17,27,39,6} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{4229,3680,3702,2152},
		{4343,4711,3914,3016},
		{3352,3001,3079,2424},
		{2041,2957,2549,1344} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{47,38,18,1},
		{23,30,15,9},
		{48,48,49,7},
		{50,20,11,7},
		{15,36,9,23} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{35,36,9,39,9},
		{11,49,36,28,11},
		{19,5,50,1,39},
		{44,27,38,33,27} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{2449,3671,2729,2948,1570},
		{1816,2616,2379,2049,1365},
		{3447,4514,4876,3496,3060},
		{2487,3024,1986,2752,1288},
		{2104,2970,2755,2361,1503} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{7,43,43,36,26},
		{50,45,46,46,30},
		{28,49,14,17,14},
		{9,4,7,45,50} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{14,48,45,41},
		{49,46,47,8},
		{9,30,33,29},
		{19,32,24,34},
		{5,41,18,40} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{3406,5822,5087,4142},
		{4343,8552,7527,6508},
		{3312,5136,4685,3084},
		{1490,4316,2804,4134} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{35,33,13,50},
		{3,9,16,11},
		{40,50,48,25},
		{18,30,46,0},
		{41,13,39,50} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{34,4,16,25,38},
		{46,2,1,9,42},
		{47,0,39,29,22},
		{15,8,4,4,39} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{4069,606,1300,1749,4952},
		{1433,118,725,664,1273},
		{6291,460,2662,2942,5651},
		{4154,132,2112,2054,2956},
		{4575,590,2390,2473,4912} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{38,19,17,48,43},
		{24,36,47,17,47},
		{3,46,36,31,7},
		{34,13,20,0,8} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{36,7,31,19},
		{8,22,4,8},
		{46,7,40,38},
		{36,39,14,4},
		{5,46,26,7} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{4245,4653,3724,2013},
		{4161,4114,4228,2927},
		{3283,2816,2333,1966},
		{2288,1032,2114,1566} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{35,24,10,10},
		{14,39,17,15},
		{42,32,42,45},
		{46,33,27,21},
		{35,50,17,1} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{10,28,45,29,7},
		{49,26,41,17,35},
		{50,14,36,45,44},
		{15,47,1,42,37} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{2176,2214,2929,2293,1895},
		{3126,2349,2856,2464,2766},
		{4763,4711,4759,5542,4927},
		{3742,3511,4416,3992,3442},
		{3665,2565,4238,2672,2780} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{4,25,21,32,1},
		{44,50,16,46,38},
		{39,42,9,13,9},
		{34,0,10,2,16} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{10,34,4,31},
		{50,25,50,46},
		{34,47,41,47},
		{19,10,5,13},
		{11,21,14,26} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{2623,2089,2301,2703},
		{4776,4756,4094,6002},
		{3142,3118,2816,3967},
		{894,1982,780,1966} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{28,3,17,13},
		{14,42,3,27},
		{35,50,38,18},
		{33,18,44,41},
		{33,26,45,42} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{22,21,45,26,37},
		{50,37,10,19,45},
		{14,43,13,43,9},
		{20,37,50,12,4} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{1264,1911,2161,1672,1376},
		{2990,2976,2439,1615,2543},
		{4162,4885,3469,3710,3959},
		{3062,4768,4287,3584,2591},
		{3496,5144,4430,3791,2964} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{34,40,11,13,7},
		{28,19,12,24,28},
		{5,29,45,11,19},
		{36,34,32,44,37} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{30,19,40,23},
		{36,44,16,27},
		{33,24,15,15},
		{0,29,5,47},
		{30,32,12,20} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{3033,3271,2314,2778},
		{2760,3248,2060,3025},
		{3249,3378,1622,2470},
		{4470,5408,3128,5034} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{40,15,34,19},
		{12,34,26,8},
		{11,35,25,20},
		{43,13,34,40},
		{7,43,42,31} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{43,36,24,23,41},
		{28,27,41,44,24},
		{22,2,46,20,37},
		{47,42,39,21,37} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{3781,2711,3880,2659,3961},
		{2416,1738,3190,2460,2566},
		{2943,2231,3629,2713,2956},
		{4841,3647,4689,3081,4813},
		{3886,2799,5072,3544,4020} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{26,35,35,47,38},
		{21,37,13,17,33},
		{35,20,28,32,20},
		{40,23,43,15,21} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{4,2,28,3},
		{19,36,33,47},
		{17,35,27,46},
		{22,50,26,41},
		{20,26,14,12} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{3158,5875,4582,5716},
		{2042,3537,3064,3493},
		{2100,3890,3508,3885},
		{2078,3709,3724,4046} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{7,42,12,46},
		{50,19,5,19},
		{7,13,1,18},
		{5,6,36,41},
		{25,16,16,0} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{43,15,46,35,37},
		{0,10,6,16,9},
		{17,32,50,25,7},
		{13,8,48,2,19} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{1103,1277,3382,1309,1595},
		{2482,1252,3576,2217,2417},
		{552,411,1314,514,725},
		{1360,1615,4034,1253,1270},
		{1347,1047,2046,1531,1181} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{45,35,5,19,50},
		{18,15,44,0,34},
		{2,17,37,33,43},
		{24,4,30,42,14} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{21,8,47,45},
		{13,11,19,17},
		{14,26,25,28},
		{24,14,41,42},
		{8,6,0,35} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{2326,1441,3684,5308},
		{1461,1657,2231,3487},
		{1917,1885,2695,4306},
		{2096,1688,3676,4242} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{36,35,5,11},
		{2,41,22,1},
		{47,36,50,10},
		{1,40,0,8},
		{15,47,35,5} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{36,32,48,17,18},
		{44,41,37,12,31},
		{44,39,1,42,28},
		{10,18,43,19,2} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{3166,2980,3501,1451,1895},
		{2854,2621,1678,1469,1925},
		{5576,5110,4068,3521,3382},
		{1876,1816,1872,649,1274},
		{4198,3862,2709,2384,2717} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{5,48,36,15,13},
		{7,37,4,22,50},
		{33,48,45,37,2},
		{23,19,2,2,24} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{22,49,17,8},
		{1,24,30,36},
		{31,23,32,28},
		{34,40,9,4},
		{48,19,27,46} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{2408,3072,3163,3434},
		{3463,3153,2905,3888},
		{3523,5322,3828,3492},
		{1807,2165,1691,2036} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[5][4] = {
		{8,41,16,20},
		{21,35,15,32},
		{24,27,20,46},
		{2,15,13,19},
		{43,43,49,49} };
		Matrix<5, 4, int> lhs(m1);

		int m2[4][5] = {
		{12,50,30,29,11},
		{0,48,36,12,23},
		{39,2,12,0,27},
		{12,6,23,21,33} };
		Matrix<4, 5, int> rhs(m2);

		int mr[5][5] = {
		{960,2520,2368,1144,2123},
		{1221,2952,2806,1701,2497},
		{1620,2812,2990,1986,2943},
		{759,960,1193,637,1345},
		{3015,4606,4553,2792,4402} };
		Matrix<5, 5, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	{
		int m1[4][5] = {
		{12,25,3,42,25},
		{17,17,21,16,18},
		{24,15,13,23,41},
		{17,16,6,43,19} };
		Matrix<4, 5, int> lhs(m1);

		int m2[5][4] = {
		{5,19,47,50},
		{35,1,27,40},
		{0,49,11,3},
		{10,12,40,19},
		{7,41,5,3} };
		Matrix<5, 4, int> rhs(m2);

		int mr[4][4] = {
		{1530,1929,3077,2482},
		{966,2299,2219,1951},
		{1162,3065,2801,2399},
		{1208,1928,3112,2382} };
		Matrix<4, 4, int> res(mr);
		EXPECT_TRUE(lhs*rhs == res);
	}

	MTEST_END();
}

TEST(Matrix, OperatorMinusNoArg)
{
	int m1[4][5] = {
	{12,25,3,42,25},
	{17,17,21,16,18},
	{24,15,13,23,41},
	{17,16,6,43,19} };
	Matrix<4, 5, int> m(m1);
	for (size_t i = 0; i < 4; i++)
		for (size_t j = 0; j < 5; j++)
			m1[i][j] = -m1[i][j];
	Matrix<4, 5, int> fm(m1);
	EXPECT_EQ(-m, fm);
}

TEST(Matrix, OperatorNotEqual)
{
	int m1[4][5] = {
	{12,25,3,42,25},
	{17,17,21,16,18},
	{24,15,13,23,41},
	{17,16,6,43,19} };
	Matrix<4, 5, int> m(m1);
	for (size_t i = 0; i < 4; i++)
		for (size_t j = 0; j < 5; j++)
			m1[i][j] = -m1[i][j];
	Matrix<4, 5, int> fm(m1);
	EXPECT_TRUE(m != fm);
}

int main(int argc, char** argv)
{
	testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}